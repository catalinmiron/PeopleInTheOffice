import React, { Component } from 'react';
import { Alert, Vibration, Platform, AppRegistry, StyleSheet, Text, View, DeviceEventEmitter, Linking, Dimensions, TouchableHighlight } from 'react-native'
import moment from 'moment'

var PushNotification = require('react-native-push-notification');

PushNotification.configure({

    // (optional) Called when Token is generated (iOS and Android)
    onRegister: function(token) {
        // Alert.alert(token)
        console.log( 'TOKEN:', token );
    },

    // (required) Called when a remote or local notification is opened or received
    onNotification: function(notification) {
        // Alert.alert(notification)
        console.log( 'NOTIFICATION:', notification );
    },

    // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
    // senderID: "YOUR GCM SENDER ID",

    // IOS ONLY (optional): default: all - Permissions to register.
    permissions: {
        alert: true,
        badge: false,
        sound: true
    },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
      * (optional) default: true
      * - Specified if permissions (ios) and token (android and ios) will requested or not,
      * - if not, you must call PushNotificationsHandler.requestPermissions() later
      */
    requestPermissions: true,
});

const deviceWidth = Dimensions.get('window').width
const deviceHeight = Dimensions.get('window').height

var { RNLocation: Location } = require('NativeModules');
import inOffice from '../lib/in-office';

// Location.startUpdatingHeading();

export default class Home extends Component {

  constructor() {
    super()
    this.state = {
      location: {
        course:358.28,
        speed:0,
        longitude:-122.02322184,
        latitude:37.33743371,
        accuracy:5,
        altitude:0,
        altitudeAccuracy:-1,
        timestamp:0
      },
      counter: 0
    }
  }

  componentWillMount() {
    // Location.requestWhenInUseAuthorization()
    // Location.requestAlwaysAuthorization()
    // Location.startUpdatingLocation()
    if (Platform.OS === 'ios') {
      Location.requestAlwaysAuthorization();
      Location.setAllowsBackgroundLocationUpdates(true);
      Location.setDistanceFilter(3.0);
      Location.setDesiredAccuracy(1);
      Location.startMonitoringSignificantLocationChanges();
    } else {
      Location.requestAlwaysAuthorization()
    }
    DeviceEventEmitter.addListener('locationUpdated', (location) => {
      // if(this.state.hasSeenNotification) {
        this.notifyUser(location);

        this.setState({'location':location, counter: this.state.counter + 1})
      // }

    })
  }

  notifyUser(location) {
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      subText: "This is a subText", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      // category: // (optional) default: null
      // userInfo: // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: "Location has changed!", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
      message: inOffice(location.longitude, location.latitude) ? "You are inside the building!" : "You're not in the building!", // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: this.state.counter + 1, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    });
  }

  isInOffice() {
    const {longitude, latitude} = this.state.location;
    // inOffice(longitude, latitude, office)
    return inOffice(longitude, latitude);
  }

  render() {
    const repoUrl = 'https://github.com/timfpark/react-native-location'

    return (
      <View style={styles.container}>
        <View style={{alignItems:'center',marginTop:30}}>
          <Text style={[styles.text,{textAlign:'center',fontSize:30,fontWeight:'bold'}]}>
            react-native-location
          </Text>
          <TouchableHighlight onPress={() => { Linking.openURL(repoUrl).catch(err => console.error('An error occurred', err)); }}
            underlayColor='#CCC' activeOpacity={0.8}>
            <Text style={[styles.text,{textAlign:'center',fontSize:12,color:'#00C',textDecorationLine:'underline'}]}>
              {repoUrl}
            </Text>
          </TouchableHighlight>
        </View>

        <View style={styles.row}>
          <TouchableHighlight onPress={() => { Location.startUpdatingLocation() }} style={[styles.button,{backgroundColor:'#126312'}]}>
              <Text style={[styles.text,{fontSize:30,color:'#fff'}]}>Start</Text>
          </TouchableHighlight>

          <TouchableHighlight onPress={() => { Location.stopUpdatingLocation() }} style={[styles.button,{backgroundColor:'#881717'}]}>
              <Text style={[styles.text,{fontSize:30,color:'#fff'}]}>Stop</Text>
          </TouchableHighlight>
        </View>

        <View style={styles.row}>
          <View style={[styles.detailBox,{width:deviceWidth/3}]}>
            <Text style={styles.text}>
              in office:
            </Text>
            <Text style={[styles.detail,{fontSize:25}]}>
              {this.isInOffice() ? 'true' : 'false'}
            </Text>
          </View>

          <View style={[styles.detailBox,{width:deviceWidth/3}]}>
            <Text style={styles.text}>
              Speed:
            </Text>
            <Text style={[styles.detail,{fontSize:25}]}>
              {this.state.location.coords}
            </Text>
          </View>

          <View style={[styles.detailBox,{width:deviceWidth/3}]}>
            <Text style={styles.text}>
              Altitude
            </Text>
            <Text style={[styles.detail,{fontSize:25}]}>
              {this.state.location.altitude}
            </Text>
          </View>
        </View>

        <View style={{alignItems:'flex-start'}}>
          <View style={styles.row}>
            <View style={[styles.detailBox,{width:deviceWidth/2}]}>
              <Text style={styles.text}>
                Latitude
              </Text>
              <Text style={[styles.detail,{fontSize:20}]}>
                {this.state.location.latitude}
              </Text>
            </View>

            <View style={[styles.detailBox,{width:deviceWidth/2}]}>
              <Text style={styles.text}>
                Longitude
              </Text>
              <Text style={[styles.text,{fontSize:20}]}>
                {this.state.location.longitude}
              </Text>
            </View>
          </View>

          <View style={styles.row}>
            <View style={[styles.detailBox,{width:deviceWidth/2}]}>
              <Text style={styles.text}>
                Accuracy
              </Text>
              <Text style={[styles.detail,{fontSize:20}]}>
                {this.state.location.accuracy}
              </Text>
            </View>

            <View style={[styles.detailBox,{width:deviceWidth/2}]}>
              <Text style={styles.text}>
                Altitude Accuracy
              </Text>
              <Text style={[styles.detail,{fontSize:20}]}>
                {this.state.location.altitudeAccuracy}
              </Text>
            </View>
          </View>

          <View style={styles.row}>
            <View style={[styles.detailBox,{width:deviceWidth/2}]}>
              <Text style={{fontFamily:'Futura',fontSize:12}}>
                Timestamp
              </Text>
              <Text style={[styles.detail,{fontSize:15}]}>
                {this.state.location.timestamp}
              </Text>
            </View>

            <View style={[styles.detailBox,{width:deviceWidth/2}]}>
              <Text style={styles.text}>
                Date / Time
              </Text>
              <Text style={[styles.detail,{fontSize:15}]}>
                {moment(this.state.location.timestamp).format("MM-DD-YYYY h:mm:ss")}
              </Text>
            </View>
          </View>

          <View style={[styles.row,{marginTop:10}]}>
            <View style={[styles.detailBox,{width:deviceWidth}]}>
              <Text style={styles.json}>
                {JSON.stringify(this.state.location)}
              </Text>
            </View>
          </View>

        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#CCCCCC',
    height:deviceHeight,
  },
  row: {
    flex:1,
    width:deviceWidth,
    flexDirection:'row',
    alignItems:'flex-start',
    justifyContent:'space-between',
    marginTop:5,
    marginBottom:5,
  },
  detailBox: {
    padding:15,
    height:75,
    justifyContent:'center'
  },
  button: {
    marginLeft:10,
    marginRight:10,
    marginTop:15,
    backgroundColor:'#0C0',
    borderRadius:10,
    alignItems:'center',
    justifyContent:'center',
    padding:10,
    width:(deviceWidth/2)-40
  },
  text: {
    fontFamily:'Futura',
    fontSize:12
  },
  detail: {
    fontFamily:'Futura',
    fontSize:12,
    fontWeight:'bold'
  },
  json: {
    fontSize: 12,
    fontFamily: 'Courier',
    textAlign: 'center',
    fontWeight:'bold'
  }
});
